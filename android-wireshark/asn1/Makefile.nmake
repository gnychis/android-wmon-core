## Makefile for building wireshark.exe with Microsoft C and nmake
## Use: $(MAKE) /$(MAKEFLAGS) -f makefile.nmake
##  (See 'Logic' below for additional details)
#
# $Id: Makefile.nmake 36013 2011-02-20 17:03:29Z stig $
#
#
# Wireshark - Network traffic analyzer
# By Gerald Combs <gerald@wireshark.org>
# Copyright 1998 Gerald Combs
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.


# Logic;
# 1. If this Makefile is invoked w/o a target: 
#    Do default target 'all' which invokes the Makefile.nmake
#     in each individual ASN1 sub-directory using the value of ASN1_MAKE_TARGET
#     as the make target.
#    (If ASN1_MAKE_TARGET is not defined then default to "copy_files"
#     which generates the individual ASN1 dissector files and then copies 
#     the generated .[hc] files to epan\dissectors).
#
# 2. If this Makefile is invoked with one of the following targets, then do the action for the target:
#    Reinvoke this Makefile with 'all' as target and with ASN1_MAKE_TARGET 
#     defined as appropriate.
#       clean
#       generate_dissector   : generate the dissectors but do *not* copy the [.hc] files to epan\dissectors
#       compare_files        : generate the dissectors and then *compare* the .[hc] files to epan\dissectors
#       copy_files           : generate the dissectors and then copy the .[hc] files to epan\dissectors
#                            :  (This is, in effect, the same as invoking this makefile w/o a target).

BER_LIST= \
	acp133			\
	acse			\
	ansi_map		\
	ansi_tcap		\
	camel			\
	cdt			\
	charging_ase		\
	cmip			\
	cmp			\
	crmf			\
	cms			\
	dap			\
	dop			\
	disp			\
	dsp			\
	ess			\
	ftam			\
	gnm			\
	goose			\
	gsm_map			\
	gprscdr			\
	h248			\
	HI2Operations		\
	inap			\
###	kerberos		\
	ldap 			\
	logotypecertextn	\
	mms			\
	ns_cert_exts		\
	ocsp			\
	p1			\
	p22			\
	p7			\
	p772			\
	pkcs1			\
	pkcs12			\
	pkinit			\
	pkixac			\
	pkix1explicit		\
	pkix1implicit		\
	pkixproxy		\
	pkixqualified		\
	pkixtsp			\
	pres			\
	q932			\
	q932-ros		\
	qsig			\
	ros			\
	rtse			\
	smrse			\
	snmp			\
	spnego			\
	sv			\
	t125			\
	tcap			\
	wlancertextn		\
	x509af			\
	x509ce			\
	x509if			\
	x509sat

PER_LIST= \
	h225			\
	h235			\
	h245			\
	h282			\
	h283			\
	h323			\
	h450			\
	h450-ros		\
	h460			\
	h501			\
	hnbap			\
	lte-rrc			\
	nbap			\
	mpeg-audio		\
	mpeg-pes		\
	pcap			\
	ranap			\
	rnsap			\
	rrc			\
	rrlp			\
	rua			\
	s1ap			\
	sabp			\
	t38			\
	tetra			\
	ulp			\
	x2ap


!IFNDEF ASN1_MAKE_TARGET
ASN1_MAKE_TARGET=copy_files
!ENDIF

all: ber per

ber: $(BER_LIST)

per: $(PER_LIST)

$(BER_LIST) $(PER_LIST) : _FORCE_  # _FORCE_ req'd since each target actually exists
	cd $@
	$(MAKE) /$(MAKEFLAGS) -f Makefile.nmake $(ASN1_MAKE_TARGET)
	cd ..

# When this Makefile is invoked with an explicit target then
#  this Makefile is re-invoked with 'all' as target and with
#  ASN1_MAKE_TARGET defined as to the action needed.

clean generate_dissector compare_files copy_files :
	$(MAKE) /$(MAKEFLAGS) -f Makefile.nmake	all ASN1_MAKE_TARGET=$@

####
_FORCE_:  ## Assumption: no file named _FORCE_ exists in the current directory

